/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */

package com.google.api.services.servicecontrol.v1.model;

/**
 * Defines a metric type and its schema.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Service Control API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MetricDescriptor extends com.google.api.client.json.GenericJson {

  /**
   * A detailed description of the metric, which can be used in documentation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * A concise name for the metric, which can be displayed in user interfaces. Use sentence case
   * without an ending period, for example "Request count".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * The set of labels that can be used to describe a specific instance of this metric type. For
   * example, the `compute.googleapis.com/instance/network/received_bytes_count` metric type has a
   * label, `loadbalanced`, that specifies whether the traffic was received through a load balanced
   * IP address.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<LabelDescriptor> labels;

  /**
   * Whether the metric records instantaneous values, changes to a value, etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String metricKind;

  /**
   * Resource name. The format of the name may vary between different implementations. For examples:
   *
   *     projects/{project_id}/metricDescriptors/{type=**}     metricDescriptors/{type=**}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The metric type including a DNS name prefix, for example
   * `"compute.googleapis.com/instance/cpu/utilization"`. Metric types should use a natural
   * hierarchical grouping such as the following:
   *
   *     compute.googleapis.com/instance/cpu/utilization
   * compute.googleapis.com/instance/disk/read_ops_count
   * compute.googleapis.com/instance/network/received_bytes_count
   *
   * Note that if the metric type changes, the monitoring data will be discontinued, and anything
   * depends on it will break, such as monitoring dashboards, alerting rules and quota limits.
   * Therefore, once a metric has been published, its type should be immutable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The unit in which the metric value is reported. It is only applicable if the `value_type` is
   * `INT64`, `DOUBLE`, or `DISTRIBUTION`. The supported units are a subset of [The Unified Code for
   * Units of Measure](http://unitsofmeasure.org/ucum.html) standard:
   *
   * **Basic units (UNIT)**
   *
   * * `bit`   bit * `By`    byte * `s`     second * `min`   minute * `h`     hour * `d`     day
   *
   * **Prefixes (PREFIX)**
   *
   * * `k`     kilo    (10**3) * `M`     mega    (10**6) * `G`     giga    (10**9) * `T`     tera
   * (10**12) * `P`     peta    (10**15) * `E`     exa     (10**18) * `Z`     zetta   (10**21) * `Y`
   * yotta   (10**24) * `m`     milli   (10**-3) * `u`     micro   (10**-6) * `n`     nano
   * (10**-9) * `p`     pico    (10**-12) * `f`     femto   (10**-15) * `a`     atto    (10**-18) *
   * `z`     zepto   (10**-21) * `y`     yocto   (10**-24) * `Ki`    kibi    (2**10) * `Mi`    mebi
   * (2**20) * `Gi`    gibi    (2**30) * `Ti`    tebi    (2**40)
   *
   * **Grammar**
   *
   * The grammar includes the dimensionless unit `1`, such as `1/s`.
   *
   * The grammar also includes these connectors:
   *
   * * `/`    division (as an infix operator, e.g. `1/s`). * `.`    multiplication (as an infix
   * operator, e.g. `GBy.d`)
   *
   * The grammar for a unit is as follows:
   *
   *     Expression = Component { "." Component } { "/" Component } ;
   *
   *     Component = [ PREFIX ] UNIT [ Annotation ]               | Annotation               | "1"
   * ;
   *
   *     Annotation = "{" NAME "}" ;
   *
   * Notes:
   *
   * * `Annotation` is just a comment if it follows a `UNIT` and is    equivalent to `1` if it is
   * used alone. For examples,    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`. * `NAME` is a
   * sequence of non-blank printable ASCII characters not    containing '{' or '}'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String unit;

  /**
   * Whether the measurement is an integer, a floating-point number, etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String valueType;

  /**
   * A detailed description of the metric, which can be used in documentation.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * A detailed description of the metric, which can be used in documentation.
   * @param description description or {@code null} for none
   */
  public MetricDescriptor setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * A concise name for the metric, which can be displayed in user interfaces. Use sentence case
   * without an ending period, for example "Request count".
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * A concise name for the metric, which can be displayed in user interfaces. Use sentence case
   * without an ending period, for example "Request count".
   * @param displayName displayName or {@code null} for none
   */
  public MetricDescriptor setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The set of labels that can be used to describe a specific instance of this metric type. For
   * example, the `compute.googleapis.com/instance/network/received_bytes_count` metric type has a
   * label, `loadbalanced`, that specifies whether the traffic was received through a load balanced
   * IP address.
   * @return value or {@code null} for none
   */
  public java.util.List<LabelDescriptor> getLabels() {
    return labels;
  }

  /**
   * The set of labels that can be used to describe a specific instance of this metric type. For
   * example, the `compute.googleapis.com/instance/network/received_bytes_count` metric type has a
   * label, `loadbalanced`, that specifies whether the traffic was received through a load balanced
   * IP address.
   * @param labels labels or {@code null} for none
   */
  public MetricDescriptor setLabels(java.util.List<LabelDescriptor> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Whether the metric records instantaneous values, changes to a value, etc.
   * @return value or {@code null} for none
   */
  public java.lang.String getMetricKind() {
    return metricKind;
  }

  /**
   * Whether the metric records instantaneous values, changes to a value, etc.
   * @param metricKind metricKind or {@code null} for none
   */
  public MetricDescriptor setMetricKind(java.lang.String metricKind) {
    this.metricKind = metricKind;
    return this;
  }

  /**
   * Resource name. The format of the name may vary between different implementations. For examples:
   *
   *     projects/{project_id}/metricDescriptors/{type=**}     metricDescriptors/{type=**}
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Resource name. The format of the name may vary between different implementations. For examples:
   *
   *     projects/{project_id}/metricDescriptors/{type=**}     metricDescriptors/{type=**}
   * @param name name or {@code null} for none
   */
  public MetricDescriptor setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The metric type including a DNS name prefix, for example
   * `"compute.googleapis.com/instance/cpu/utilization"`. Metric types should use a natural
   * hierarchical grouping such as the following:
   *
   *     compute.googleapis.com/instance/cpu/utilization
   * compute.googleapis.com/instance/disk/read_ops_count
   * compute.googleapis.com/instance/network/received_bytes_count
   *
   * Note that if the metric type changes, the monitoring data will be discontinued, and anything
   * depends on it will break, such as monitoring dashboards, alerting rules and quota limits.
   * Therefore, once a metric has been published, its type should be immutable.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * The metric type including a DNS name prefix, for example
   * `"compute.googleapis.com/instance/cpu/utilization"`. Metric types should use a natural
   * hierarchical grouping such as the following:
   *
   *     compute.googleapis.com/instance/cpu/utilization
   * compute.googleapis.com/instance/disk/read_ops_count
   * compute.googleapis.com/instance/network/received_bytes_count
   *
   * Note that if the metric type changes, the monitoring data will be discontinued, and anything
   * depends on it will break, such as monitoring dashboards, alerting rules and quota limits.
   * Therefore, once a metric has been published, its type should be immutable.
   * @param type type or {@code null} for none
   */
  public MetricDescriptor setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * The unit in which the metric value is reported. It is only applicable if the `value_type` is
   * `INT64`, `DOUBLE`, or `DISTRIBUTION`. The supported units are a subset of [The Unified Code for
   * Units of Measure](http://unitsofmeasure.org/ucum.html) standard:
   *
   * **Basic units (UNIT)**
   *
   * * `bit`   bit * `By`    byte * `s`     second * `min`   minute * `h`     hour * `d`     day
   *
   * **Prefixes (PREFIX)**
   *
   * * `k`     kilo    (10**3) * `M`     mega    (10**6) * `G`     giga    (10**9) * `T`     tera
   * (10**12) * `P`     peta    (10**15) * `E`     exa     (10**18) * `Z`     zetta   (10**21) * `Y`
   * yotta   (10**24) * `m`     milli   (10**-3) * `u`     micro   (10**-6) * `n`     nano
   * (10**-9) * `p`     pico    (10**-12) * `f`     femto   (10**-15) * `a`     atto    (10**-18) *
   * `z`     zepto   (10**-21) * `y`     yocto   (10**-24) * `Ki`    kibi    (2**10) * `Mi`    mebi
   * (2**20) * `Gi`    gibi    (2**30) * `Ti`    tebi    (2**40)
   *
   * **Grammar**
   *
   * The grammar includes the dimensionless unit `1`, such as `1/s`.
   *
   * The grammar also includes these connectors:
   *
   * * `/`    division (as an infix operator, e.g. `1/s`). * `.`    multiplication (as an infix
   * operator, e.g. `GBy.d`)
   *
   * The grammar for a unit is as follows:
   *
   *     Expression = Component { "." Component } { "/" Component } ;
   *
   *     Component = [ PREFIX ] UNIT [ Annotation ]               | Annotation               | "1"
   * ;
   *
   *     Annotation = "{" NAME "}" ;
   *
   * Notes:
   *
   * * `Annotation` is just a comment if it follows a `UNIT` and is    equivalent to `1` if it is
   * used alone. For examples,    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`. * `NAME` is a
   * sequence of non-blank printable ASCII characters not    containing '{' or '}'.
   * @return value or {@code null} for none
   */
  public java.lang.String getUnit() {
    return unit;
  }

  /**
   * The unit in which the metric value is reported. It is only applicable if the `value_type` is
   * `INT64`, `DOUBLE`, or `DISTRIBUTION`. The supported units are a subset of [The Unified Code for
   * Units of Measure](http://unitsofmeasure.org/ucum.html) standard:
   *
   * **Basic units (UNIT)**
   *
   * * `bit`   bit * `By`    byte * `s`     second * `min`   minute * `h`     hour * `d`     day
   *
   * **Prefixes (PREFIX)**
   *
   * * `k`     kilo    (10**3) * `M`     mega    (10**6) * `G`     giga    (10**9) * `T`     tera
   * (10**12) * `P`     peta    (10**15) * `E`     exa     (10**18) * `Z`     zetta   (10**21) * `Y`
   * yotta   (10**24) * `m`     milli   (10**-3) * `u`     micro   (10**-6) * `n`     nano
   * (10**-9) * `p`     pico    (10**-12) * `f`     femto   (10**-15) * `a`     atto    (10**-18) *
   * `z`     zepto   (10**-21) * `y`     yocto   (10**-24) * `Ki`    kibi    (2**10) * `Mi`    mebi
   * (2**20) * `Gi`    gibi    (2**30) * `Ti`    tebi    (2**40)
   *
   * **Grammar**
   *
   * The grammar includes the dimensionless unit `1`, such as `1/s`.
   *
   * The grammar also includes these connectors:
   *
   * * `/`    division (as an infix operator, e.g. `1/s`). * `.`    multiplication (as an infix
   * operator, e.g. `GBy.d`)
   *
   * The grammar for a unit is as follows:
   *
   *     Expression = Component { "." Component } { "/" Component } ;
   *
   *     Component = [ PREFIX ] UNIT [ Annotation ]               | Annotation               | "1"
   * ;
   *
   *     Annotation = "{" NAME "}" ;
   *
   * Notes:
   *
   * * `Annotation` is just a comment if it follows a `UNIT` and is    equivalent to `1` if it is
   * used alone. For examples,    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`. * `NAME` is a
   * sequence of non-blank printable ASCII characters not    containing '{' or '}'.
   * @param unit unit or {@code null} for none
   */
  public MetricDescriptor setUnit(java.lang.String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Whether the measurement is an integer, a floating-point number, etc.
   * @return value or {@code null} for none
   */
  public java.lang.String getValueType() {
    return valueType;
  }

  /**
   * Whether the measurement is an integer, a floating-point number, etc.
   * @param valueType valueType or {@code null} for none
   */
  public MetricDescriptor setValueType(java.lang.String valueType) {
    this.valueType = valueType;
    return this;
  }

  @Override
  public MetricDescriptor set(String fieldName, Object value) {
    return (MetricDescriptor) super.set(fieldName, value);
  }

  @Override
  public MetricDescriptor clone() {
    return (MetricDescriptor) super.clone();
  }

}
