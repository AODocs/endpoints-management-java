/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */

package com.google.api.services.servicecontrol.v1.model;

/**
 * Represents information regarding an operation.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Service Control API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Operation extends com.google.api.client.json.GenericJson {

  /**
   * Identity of the consumer who is using the service. This field should be filled in for the
   * operations initiated by a consumer, but not for service initiated operations that are not
   * related to a specific consumer.
   *
   * The accepted format is dependent on the implementation. The Google Service Control
   * implementation accepts four forms: "project:", "project_number:", "api_key:" and
   * "spatula_header:".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String consumerId;

  /**
   * End time of the operation. Required when the operation is used in ControllerService.Report, but
   * optional when the operation is used in ControllerService.Check.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String endTime;

  /**
   * The importance of the data contained in the operation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String importance;

  /**
   * Labels describing the operation. The names of these labels are either defined and documented by
   * Google Cloud Platform, or defined in the service configuration. Any label whose name is not
   * known to the system is ignored. Besides defining service-specific label keys, the service
   * configuration also specifies what set of labels are used in which metrics.
   *
   * The set of labels here and the set of labels in MetricValue and LogEntry form a hierarchy of
   * overrides. The effective set of labels in a MetricValue is the union of this label set and the
   * label set in the MetricValue. If a label key appears in both sets, then the value of the label
   * in this set is ignored and the one in the MetricValue is used. Same for LogEntry.
   *
   * Example of a label defined by Google Cloud Platform:     compute.googleapis.com/instance_type:
   * "n1-standard-1"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Represents information to be logged.
   *
   * LogEntry.log field is required to specify the name of the log resource. If LogEntry.insert_id
   * is not specified, the implementation will generate one based on operation_id.
   *
   * The only fields useful in LogEntryMetadata are timestamp, severity, and labels, all other
   * fields are ignored. If LogEntryMetadata.timestamp is not specified, Operation.end_time value is
   * used in its place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<LogEntry> logEntries;

  /**
   * Represents information about this operation. Each MetricValueSet corresponds to a metric
   * defined in the service configuration. The data type used in the MetricValueSet must agree with
   * the data type specified in the metric definition.
   *
   * Within a single operation, it is not allowed to have more than one MetricValue instances that
   * have the same metric names and identical label value combinations. The existence of such
   * duplicated MetricValue instances in a request causes the entire request being rejected with an
   * invalid argument error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<MetricValueSet> metricValueSets;

  /**
   * Identity of the operation. It must be unique within the scope of the service that the operation
   * is generated. If the service calls Check() and Report() on the same operation, the two calls
   * should carry the same id.
   *
   * UUID version 4 is recommended, though not required. In the scenarios where an operation is
   * computed from existing information and an idempotent id is desirable for deduplication purpose,
   * UUID version 5 is recommended. See RFC 4122 for details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String operationId;

  /**
   * Fully qualified name of the operation. Example of an RPC method name used as operation name:
   * google.example.library.v1.LibraryService.CreateShelf Example of a service defined operation
   * name:     compute.googleapis.com/InstanceHeartbeat
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String operationName;

  /**
   * Represents the properties needed for quota check. Applicable only if this operation is for a
   * quota check request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private QuotaProperties quotaProperties;

  /**
   * Start time of the operation. Required.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String startTime;

  /**
   * Identity of the consumer who is using the service. This field should be filled in for the
   * operations initiated by a consumer, but not for service initiated operations that are not
   * related to a specific consumer.
   *
   * The accepted format is dependent on the implementation. The Google Service Control
   * implementation accepts four forms: "project:", "project_number:", "api_key:" and
   * "spatula_header:".
   * @return value or {@code null} for none
   */
  public java.lang.String getConsumerId() {
    return consumerId;
  }

  /**
   * Identity of the consumer who is using the service. This field should be filled in for the
   * operations initiated by a consumer, but not for service initiated operations that are not
   * related to a specific consumer.
   *
   * The accepted format is dependent on the implementation. The Google Service Control
   * implementation accepts four forms: "project:", "project_number:", "api_key:" and
   * "spatula_header:".
   * @param consumerId consumerId or {@code null} for none
   */
  public Operation setConsumerId(java.lang.String consumerId) {
    this.consumerId = consumerId;
    return this;
  }

  /**
   * End time of the operation. Required when the operation is used in ControllerService.Report, but
   * optional when the operation is used in ControllerService.Check.
   * @return value or {@code null} for none
   */
  public String getEndTime() {
    return endTime;
  }

  /**
   * End time of the operation. Required when the operation is used in ControllerService.Report, but
   * optional when the operation is used in ControllerService.Check.
   * @param endTime endTime or {@code null} for none
   */
  public Operation setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The importance of the data contained in the operation.
   * @return value or {@code null} for none
   */
  public java.lang.String getImportance() {
    return importance;
  }

  /**
   * The importance of the data contained in the operation.
   * @param importance importance or {@code null} for none
   */
  public Operation setImportance(java.lang.String importance) {
    this.importance = importance;
    return this;
  }

  /**
   * Labels describing the operation. The names of these labels are either defined and documented by
   * Google Cloud Platform, or defined in the service configuration. Any label whose name is not
   * known to the system is ignored. Besides defining service-specific label keys, the service
   * configuration also specifies what set of labels are used in which metrics.
   *
   * The set of labels here and the set of labels in MetricValue and LogEntry form a hierarchy of
   * overrides. The effective set of labels in a MetricValue is the union of this label set and the
   * label set in the MetricValue. If a label key appears in both sets, then the value of the label
   * in this set is ignored and the one in the MetricValue is used. Same for LogEntry.
   *
   * Example of a label defined by Google Cloud Platform:     compute.googleapis.com/instance_type:
   * "n1-standard-1"
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Labels describing the operation. The names of these labels are either defined and documented by
   * Google Cloud Platform, or defined in the service configuration. Any label whose name is not
   * known to the system is ignored. Besides defining service-specific label keys, the service
   * configuration also specifies what set of labels are used in which metrics.
   *
   * The set of labels here and the set of labels in MetricValue and LogEntry form a hierarchy of
   * overrides. The effective set of labels in a MetricValue is the union of this label set and the
   * label set in the MetricValue. If a label key appears in both sets, then the value of the label
   * in this set is ignored and the one in the MetricValue is used. Same for LogEntry.
   *
   * Example of a label defined by Google Cloud Platform:     compute.googleapis.com/instance_type:
   * "n1-standard-1"
   * @param labels labels or {@code null} for none
   */
  public Operation setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Represents information to be logged.
   *
   * LogEntry.log field is required to specify the name of the log resource. If LogEntry.insert_id
   * is not specified, the implementation will generate one based on operation_id.
   *
   * The only fields useful in LogEntryMetadata are timestamp, severity, and labels, all other
   * fields are ignored. If LogEntryMetadata.timestamp is not specified, Operation.end_time value is
   * used in its place.
   * @return value or {@code null} for none
   */
  public java.util.List<LogEntry> getLogEntries() {
    return logEntries;
  }

  /**
   * Represents information to be logged.
   *
   * LogEntry.log field is required to specify the name of the log resource. If LogEntry.insert_id
   * is not specified, the implementation will generate one based on operation_id.
   *
   * The only fields useful in LogEntryMetadata are timestamp, severity, and labels, all other
   * fields are ignored. If LogEntryMetadata.timestamp is not specified, Operation.end_time value is
   * used in its place.
   * @param logEntries logEntries or {@code null} for none
   */
  public Operation setLogEntries(java.util.List<LogEntry> logEntries) {
    this.logEntries = logEntries;
    return this;
  }

  /**
   * Represents information about this operation. Each MetricValueSet corresponds to a metric
   * defined in the service configuration. The data type used in the MetricValueSet must agree with
   * the data type specified in the metric definition.
   *
   * Within a single operation, it is not allowed to have more than one MetricValue instances that
   * have the same metric names and identical label value combinations. The existence of such
   * duplicated MetricValue instances in a request causes the entire request being rejected with an
   * invalid argument error.
   * @return value or {@code null} for none
   */
  public java.util.List<MetricValueSet> getMetricValueSets() {
    return metricValueSets;
  }

  /**
   * Represents information about this operation. Each MetricValueSet corresponds to a metric
   * defined in the service configuration. The data type used in the MetricValueSet must agree with
   * the data type specified in the metric definition.
   *
   * Within a single operation, it is not allowed to have more than one MetricValue instances that
   * have the same metric names and identical label value combinations. The existence of such
   * duplicated MetricValue instances in a request causes the entire request being rejected with an
   * invalid argument error.
   * @param metricValueSets metricValueSets or {@code null} for none
   */
  public Operation setMetricValueSets(java.util.List<MetricValueSet> metricValueSets) {
    this.metricValueSets = metricValueSets;
    return this;
  }

  /**
   * Identity of the operation. It must be unique within the scope of the service that the operation
   * is generated. If the service calls Check() and Report() on the same operation, the two calls
   * should carry the same id.
   *
   * UUID version 4 is recommended, though not required. In the scenarios where an operation is
   * computed from existing information and an idempotent id is desirable for deduplication purpose,
   * UUID version 5 is recommended. See RFC 4122 for details.
   * @return value or {@code null} for none
   */
  public java.lang.String getOperationId() {
    return operationId;
  }

  /**
   * Identity of the operation. It must be unique within the scope of the service that the operation
   * is generated. If the service calls Check() and Report() on the same operation, the two calls
   * should carry the same id.
   *
   * UUID version 4 is recommended, though not required. In the scenarios where an operation is
   * computed from existing information and an idempotent id is desirable for deduplication purpose,
   * UUID version 5 is recommended. See RFC 4122 for details.
   * @param operationId operationId or {@code null} for none
   */
  public Operation setOperationId(java.lang.String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * Fully qualified name of the operation. Example of an RPC method name used as operation name:
   * google.example.library.v1.LibraryService.CreateShelf Example of a service defined operation
   * name:     compute.googleapis.com/InstanceHeartbeat
   * @return value or {@code null} for none
   */
  public java.lang.String getOperationName() {
    return operationName;
  }

  /**
   * Fully qualified name of the operation. Example of an RPC method name used as operation name:
   * google.example.library.v1.LibraryService.CreateShelf Example of a service defined operation
   * name:     compute.googleapis.com/InstanceHeartbeat
   * @param operationName operationName or {@code null} for none
   */
  public Operation setOperationName(java.lang.String operationName) {
    this.operationName = operationName;
    return this;
  }

  /**
   * Represents the properties needed for quota check. Applicable only if this operation is for a
   * quota check request.
   * @return value or {@code null} for none
   */
  public QuotaProperties getQuotaProperties() {
    return quotaProperties;
  }

  /**
   * Represents the properties needed for quota check. Applicable only if this operation is for a
   * quota check request.
   * @param quotaProperties quotaProperties or {@code null} for none
   */
  public Operation setQuotaProperties(QuotaProperties quotaProperties) {
    this.quotaProperties = quotaProperties;
    return this;
  }

  /**
   * Start time of the operation. Required.
   * @return value or {@code null} for none
   */
  public String getStartTime() {
    return startTime;
  }

  /**
   * Start time of the operation. Required.
   * @param startTime startTime or {@code null} for none
   */
  public Operation setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  @Override
  public Operation set(String fieldName, Object value) {
    return (Operation) super.set(fieldName, value);
  }

  @Override
  public Operation clone() {
    return (Operation) super.clone();
  }

}
