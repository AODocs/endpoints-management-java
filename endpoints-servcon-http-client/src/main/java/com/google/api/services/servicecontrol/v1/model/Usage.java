/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */

package com.google.api.services.servicecontrol.v1.model;

/**
 * Configuration controlling usage of a service.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Service Control API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Usage extends com.google.api.client.json.GenericJson {

  /**
   * Services that must be contacted before a consumer can begin using the service. Each service
   * will be contacted in sequence, and, if any activation call fails, the entire activation will
   * fail. Each hook is of the form /, where  is optional; for example:
   * 'robotservice.googleapis.com/default'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> activationHooks;

  /**
   * Services that must be contacted before a consumer can deactivate a service. Each service will
   * be contacted in sequence, and, if any deactivation call fails, the entire deactivation will
   * fail. Each hook is of the form /, where  is optional; for example: 'compute.googleapis.com/'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> deactivationHooks;

  /**
   * Services that must be activated in order for this service to be used. The set of services
   * activated as a result of these relations are all activated in parallel with no guaranteed order
   * of activation. Each string is a service name, e.g. `calendar.googleapis.com`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> dependsOnServices;

  /**
   * Requirements that must be satisfied before a consumer project can use the service. Each
   * requirement is of the form /; for example 'serviceusage.googleapis.com/billing-enabled'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> requirements;

  /**
   * Individual rules for configuring usage on selected methods.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<UsageRule> rules;

  static {
    // hack to force ProGuard to consider UsageRule used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(UsageRule.class);
  }

  /**
   * Controls which users can see or activate the service.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceAccess;

  /**
   * Services that must be contacted before a consumer can begin using the service. Each service
   * will be contacted in sequence, and, if any activation call fails, the entire activation will
   * fail. Each hook is of the form /, where  is optional; for example:
   * 'robotservice.googleapis.com/default'.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getActivationHooks() {
    return activationHooks;
  }

  /**
   * Services that must be contacted before a consumer can begin using the service. Each service
   * will be contacted in sequence, and, if any activation call fails, the entire activation will
   * fail. Each hook is of the form /, where  is optional; for example:
   * 'robotservice.googleapis.com/default'.
   * @param activationHooks activationHooks or {@code null} for none
   */
  public Usage setActivationHooks(java.util.List<java.lang.String> activationHooks) {
    this.activationHooks = activationHooks;
    return this;
  }

  /**
   * Services that must be contacted before a consumer can deactivate a service. Each service will
   * be contacted in sequence, and, if any deactivation call fails, the entire deactivation will
   * fail. Each hook is of the form /, where  is optional; for example: 'compute.googleapis.com/'.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDeactivationHooks() {
    return deactivationHooks;
  }

  /**
   * Services that must be contacted before a consumer can deactivate a service. Each service will
   * be contacted in sequence, and, if any deactivation call fails, the entire deactivation will
   * fail. Each hook is of the form /, where  is optional; for example: 'compute.googleapis.com/'.
   * @param deactivationHooks deactivationHooks or {@code null} for none
   */
  public Usage setDeactivationHooks(java.util.List<java.lang.String> deactivationHooks) {
    this.deactivationHooks = deactivationHooks;
    return this;
  }

  /**
   * Services that must be activated in order for this service to be used. The set of services
   * activated as a result of these relations are all activated in parallel with no guaranteed order
   * of activation. Each string is a service name, e.g. `calendar.googleapis.com`.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDependsOnServices() {
    return dependsOnServices;
  }

  /**
   * Services that must be activated in order for this service to be used. The set of services
   * activated as a result of these relations are all activated in parallel with no guaranteed order
   * of activation. Each string is a service name, e.g. `calendar.googleapis.com`.
   * @param dependsOnServices dependsOnServices or {@code null} for none
   */
  public Usage setDependsOnServices(java.util.List<java.lang.String> dependsOnServices) {
    this.dependsOnServices = dependsOnServices;
    return this;
  }

  /**
   * Requirements that must be satisfied before a consumer project can use the service. Each
   * requirement is of the form /; for example 'serviceusage.googleapis.com/billing-enabled'.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getRequirements() {
    return requirements;
  }

  /**
   * Requirements that must be satisfied before a consumer project can use the service. Each
   * requirement is of the form /; for example 'serviceusage.googleapis.com/billing-enabled'.
   * @param requirements requirements or {@code null} for none
   */
  public Usage setRequirements(java.util.List<java.lang.String> requirements) {
    this.requirements = requirements;
    return this;
  }

  /**
   * Individual rules for configuring usage on selected methods.
   * @return value or {@code null} for none
   */
  public java.util.List<UsageRule> getRules() {
    return rules;
  }

  /**
   * Individual rules for configuring usage on selected methods.
   * @param rules rules or {@code null} for none
   */
  public Usage setRules(java.util.List<UsageRule> rules) {
    this.rules = rules;
    return this;
  }

  /**
   * Controls which users can see or activate the service.
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceAccess() {
    return serviceAccess;
  }

  /**
   * Controls which users can see or activate the service.
   * @param serviceAccess serviceAccess or {@code null} for none
   */
  public Usage setServiceAccess(java.lang.String serviceAccess) {
    this.serviceAccess = serviceAccess;
    return this;
  }

  @Override
  public Usage set(String fieldName, Object value) {
    return (Usage) super.set(fieldName, value);
  }

  @Override
  public Usage clone() {
    return (Usage) super.clone();
  }

}
