/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */

package com.google.api.services.servicecontrol.v1.model;

/**
 * Additional data that is associated with a log entry, set by the service creating the log entry.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Service Control API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LogEntryMetadata extends com.google.api.client.json.GenericJson {

  /**
   * A set of (key, value) data that provides additional information about the log entry. If the log
   * entry is from one of the Google Cloud Platform sources listed below, the indicated (key, value)
   * information must be provided:
   *
   * Google App Engine, service_name `appengine.googleapis.com`:
   *
   *       "appengine.googleapis.com/module_id",        "appengine.googleapis.com/version_id",
   * and one of:       "appengine.googleapis.com/replica_index",
   * "appengine.googleapis.com/clone_id",
   *
   *     or else provide the following Compute Engine labels:
   *
   * Google Compute Engine, service_name `compute.googleapis.com`:
   *
   *        "compute.googleapis.com/resource_type", "instance"
   * "compute.googleapis.com/resource_id",
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * The project ID of the Google Cloud Platform service that created the log entry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String projectId;

  /**
   * The region name of the Google Cloud Platform service that created the log entry.  For example,
   * `"us-central1"`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String region;

  /**
   * Required. The API name of the Google Cloud Platform service that created the log entry.  For
   * example, `"compute.googleapis.com"`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceName;

  /**
   * The severity of the log entry. If omitted, `LogSeverity.DEFAULT` is used.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String severity;

  /**
   * The time the event described by the log entry occurred. Timestamps must be later than January
   * 1, 1970.  If omitted, Stackdriver Logging will use the time the log entry is received.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String timestamp;

  /**
   * The fully-qualified email address of the authenticated user that performed or requested the
   * action represented by the log entry. If the log entry does not apply to an action taken by an
   * authenticated user, then the field should be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String userId;

  /**
   * The zone of the Google Cloud Platform service that created the log entry. For example, `"us-
   * central1-a"`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String zone;

  /**
   * A set of (key, value) data that provides additional information about the log entry. If the log
   * entry is from one of the Google Cloud Platform sources listed below, the indicated (key, value)
   * information must be provided:
   *
   * Google App Engine, service_name `appengine.googleapis.com`:
   *
   *       "appengine.googleapis.com/module_id",        "appengine.googleapis.com/version_id",
   * and one of:       "appengine.googleapis.com/replica_index",
   * "appengine.googleapis.com/clone_id",
   *
   *     or else provide the following Compute Engine labels:
   *
   * Google Compute Engine, service_name `compute.googleapis.com`:
   *
   *        "compute.googleapis.com/resource_type", "instance"
   * "compute.googleapis.com/resource_id",
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * A set of (key, value) data that provides additional information about the log entry. If the log
   * entry is from one of the Google Cloud Platform sources listed below, the indicated (key, value)
   * information must be provided:
   *
   * Google App Engine, service_name `appengine.googleapis.com`:
   *
   *       "appengine.googleapis.com/module_id",        "appengine.googleapis.com/version_id",
   * and one of:       "appengine.googleapis.com/replica_index",
   * "appengine.googleapis.com/clone_id",
   *
   *     or else provide the following Compute Engine labels:
   *
   * Google Compute Engine, service_name `compute.googleapis.com`:
   *
   *        "compute.googleapis.com/resource_type", "instance"
   * "compute.googleapis.com/resource_id",
   * @param labels labels or {@code null} for none
   */
  public LogEntryMetadata setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * The project ID of the Google Cloud Platform service that created the log entry.
   * @return value or {@code null} for none
   */
  public java.lang.String getProjectId() {
    return projectId;
  }

  /**
   * The project ID of the Google Cloud Platform service that created the log entry.
   * @param projectId projectId or {@code null} for none
   */
  public LogEntryMetadata setProjectId(java.lang.String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * The region name of the Google Cloud Platform service that created the log entry.  For example,
   * `"us-central1"`.
   * @return value or {@code null} for none
   */
  public java.lang.String getRegion() {
    return region;
  }

  /**
   * The region name of the Google Cloud Platform service that created the log entry.  For example,
   * `"us-central1"`.
   * @param region region or {@code null} for none
   */
  public LogEntryMetadata setRegion(java.lang.String region) {
    this.region = region;
    return this;
  }

  /**
   * Required. The API name of the Google Cloud Platform service that created the log entry.  For
   * example, `"compute.googleapis.com"`.
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceName() {
    return serviceName;
  }

  /**
   * Required. The API name of the Google Cloud Platform service that created the log entry.  For
   * example, `"compute.googleapis.com"`.
   * @param serviceName serviceName or {@code null} for none
   */
  public LogEntryMetadata setServiceName(java.lang.String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * The severity of the log entry. If omitted, `LogSeverity.DEFAULT` is used.
   * @return value or {@code null} for none
   */
  public java.lang.String getSeverity() {
    return severity;
  }

  /**
   * The severity of the log entry. If omitted, `LogSeverity.DEFAULT` is used.
   * @param severity severity or {@code null} for none
   */
  public LogEntryMetadata setSeverity(java.lang.String severity) {
    this.severity = severity;
    return this;
  }

  /**
   * The time the event described by the log entry occurred. Timestamps must be later than January
   * 1, 1970.  If omitted, Stackdriver Logging will use the time the log entry is received.
   * @return value or {@code null} for none
   */
  public String getTimestamp() {
    return timestamp;
  }

  /**
   * The time the event described by the log entry occurred. Timestamps must be later than January
   * 1, 1970.  If omitted, Stackdriver Logging will use the time the log entry is received.
   * @param timestamp timestamp or {@code null} for none
   */
  public LogEntryMetadata setTimestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * The fully-qualified email address of the authenticated user that performed or requested the
   * action represented by the log entry. If the log entry does not apply to an action taken by an
   * authenticated user, then the field should be empty.
   * @return value or {@code null} for none
   */
  public java.lang.String getUserId() {
    return userId;
  }

  /**
   * The fully-qualified email address of the authenticated user that performed or requested the
   * action represented by the log entry. If the log entry does not apply to an action taken by an
   * authenticated user, then the field should be empty.
   * @param userId userId or {@code null} for none
   */
  public LogEntryMetadata setUserId(java.lang.String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The zone of the Google Cloud Platform service that created the log entry. For example, `"us-
   * central1-a"`.
   * @return value or {@code null} for none
   */
  public java.lang.String getZone() {
    return zone;
  }

  /**
   * The zone of the Google Cloud Platform service that created the log entry. For example, `"us-
   * central1-a"`.
   * @param zone zone or {@code null} for none
   */
  public LogEntryMetadata setZone(java.lang.String zone) {
    this.zone = zone;
    return this;
  }

  @Override
  public LogEntryMetadata set(String fieldName, Object value) {
    return (LogEntryMetadata) super.set(fieldName, value);
  }

  @Override
  public LogEntryMetadata clone() {
    return (LogEntryMetadata) super.clone();
  }

}
