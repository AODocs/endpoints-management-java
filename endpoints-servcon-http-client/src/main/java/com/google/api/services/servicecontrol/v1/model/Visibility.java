/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */

package com.google.api.services.servicecontrol.v1.model;

/**
 * `Visibility` defines restrictions for the visibility of service elements.  Restrictions are
 * specified using visibility labels (e.g., TRUSTED_TESTER) that are elsewhere linked to users and
 * projects.
 *
 * User and projects can have access to more than one visibility label. The effective visibility for
 * multiple labels is the union of each label's elements, plus any unrestricted elements. You must
 * list any supported label combinations in `label_combinations`.
 *
 * If an element and its parents have no restrictions, visibility is unconditionally granted.
 *
 * Example:
 *
 *     visibility:       label_combinations:       - GOOGLE_INTERNAL, TRUSTED_TESTER       rules:
 * - selector: google.calendar.Calendar.EnhancedSearch         restriction: TRUSTED_TESTER       -
 * selector: google.calendar.Calendar.Delegate         restriction: GOOGLE_INTERNAL
 *
 * Here, all methods are publicly visible except for the restricted methods EnhancedSearch and
 * Delegate. In addition, since `label_combinations` lists both GOOGLE_INTERNAL and TRUSTED_TESTER,
 * users and projects can be given access to a combined visibility with both EnhancedSearch and
 * Delegate.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Service Control API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Visibility extends com.google.api.client.json.GenericJson {

  /**
   * Controls whether visibility rules are enforced at runtime for requests to all APIs and methods.
   *
   * If true, requests without method visibility will receive a NOT_FOUND error, and any non-visible
   * fields will be scrubbed from the response messages. In service config version 0, the default is
   * false. In later config versions, it's true.
   *
   * Note, the `enforce_runtime_visibility` specified in a visibility rule overrides this setting
   * for the APIs or methods asscoiated with the rule.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean enforceRuntimeVisibility;

  /**
   * Lists valid label combinations for this service in comma-delimited form. This lets users and
   * projects see the union of these labels' elements.
   *
   * Removing a label combination can be a breaking change, as clients with access to the
   * combination will now see non-restricted elements only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> labelCombinations;

  /**
   * A list of visibility rules providing visibility configuration for individual API elements.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<VisibilityRule> rules;

  static {
    // hack to force ProGuard to consider VisibilityRule used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(VisibilityRule.class);
  }

  /**
   * Controls whether visibility rules are enforced at runtime for requests to all APIs and methods.
   *
   * If true, requests without method visibility will receive a NOT_FOUND error, and any non-visible
   * fields will be scrubbed from the response messages. In service config version 0, the default is
   * false. In later config versions, it's true.
   *
   * Note, the `enforce_runtime_visibility` specified in a visibility rule overrides this setting
   * for the APIs or methods asscoiated with the rule.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEnforceRuntimeVisibility() {
    return enforceRuntimeVisibility;
  }

  /**
   * Controls whether visibility rules are enforced at runtime for requests to all APIs and methods.
   *
   * If true, requests without method visibility will receive a NOT_FOUND error, and any non-visible
   * fields will be scrubbed from the response messages. In service config version 0, the default is
   * false. In later config versions, it's true.
   *
   * Note, the `enforce_runtime_visibility` specified in a visibility rule overrides this setting
   * for the APIs or methods asscoiated with the rule.
   * @param enforceRuntimeVisibility enforceRuntimeVisibility or {@code null} for none
   */
  public Visibility setEnforceRuntimeVisibility(java.lang.Boolean enforceRuntimeVisibility) {
    this.enforceRuntimeVisibility = enforceRuntimeVisibility;
    return this;
  }

  /**
   * Lists valid label combinations for this service in comma-delimited form. This lets users and
   * projects see the union of these labels' elements.
   *
   * Removing a label combination can be a breaking change, as clients with access to the
   * combination will now see non-restricted elements only.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLabelCombinations() {
    return labelCombinations;
  }

  /**
   * Lists valid label combinations for this service in comma-delimited form. This lets users and
   * projects see the union of these labels' elements.
   *
   * Removing a label combination can be a breaking change, as clients with access to the
   * combination will now see non-restricted elements only.
   * @param labelCombinations labelCombinations or {@code null} for none
   */
  public Visibility setLabelCombinations(java.util.List<java.lang.String> labelCombinations) {
    this.labelCombinations = labelCombinations;
    return this;
  }

  /**
   * A list of visibility rules providing visibility configuration for individual API elements.
   * @return value or {@code null} for none
   */
  public java.util.List<VisibilityRule> getRules() {
    return rules;
  }

  /**
   * A list of visibility rules providing visibility configuration for individual API elements.
   * @param rules rules or {@code null} for none
   */
  public Visibility setRules(java.util.List<VisibilityRule> rules) {
    this.rules = rules;
    return this;
  }

  @Override
  public Visibility set(String fieldName, Object value) {
    return (Visibility) super.set(fieldName, value);
  }

  @Override
  public Visibility clone() {
    return (Visibility) super.clone();
  }

}
