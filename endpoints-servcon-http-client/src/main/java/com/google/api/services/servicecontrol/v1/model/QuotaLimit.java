/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */

package com.google.api.services.servicecontrol.v1.model;

/**
 * `QuotaLimit` defines a specific limit that applies over a specified duration for a limit type.
 * There can be at most one limit for a duration and limit type combination defined within a
 * `QuotaGroup`.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Service Control API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class QuotaLimit extends com.google.api.client.json.GenericJson {

  /**
   * Default number of tokens that can be consumed during the specified duration. This is the number
   * of tokens assigned when a client application developer activates the service for his/her
   * project.
   *
   * Specifying a value of 0 will block all requests. This can be used if you are provisioning quota
   * to selected consumers and blocking others. Similarly, a value of -1 will indicate an unlimited
   * quota. No other negative values are allowed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long defaultLimit;

  /**
   * User-visible description for this quota limit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * The UI display name of the limit. If empty, client should use 'name' field instead.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Duration of this limit in textual notation. Example: "100s", "24h", "1d". For duration longer
   * than a day, only multiple of days is supported. We support only "100s" and "1d" for now.
   * Additional support will be added in the future. "0" indicates indefinite duration.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String duration;

  /**
   * Free tier value displayed in the Developers Console for this limit. The free tier is the number
   * of tokens that will be subtracted from the billed amount when billing is enabled. This field
   * can only be set on a limit with duration "1d", in a billable group; it is invalid on any other
   * limit. If this field is not set, it defaults to 0, indicating that there is no free tier for
   * this service.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long freeTier;

  /**
   * Limit type to use for enforcing this quota limit. Each unique value gets the defined number of
   * tokens to consume from. For a quota limit that uses user type, each user making requests
   * through the same client application project will get his/her own pool of tokens to consume,
   * whereas for a limit that uses client project type, all users making requests through the same
   * client application project share a single pool of tokens.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String limitBy;

  /**
   * Maximum number of tokens that can be consumed during the specified duration. Client application
   * developers can override the default limit up to this maximum. If specified, this value cannot
   * be set to a value less than the default limit. If not specified, it is set to the default
   * limit.
   *
   * To allow clients to apply overrides with no upper bound, set this to -1, indicating unlimited
   * maximum quota.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long maxLimit;

  /**
   * Name of the quota limit.  Must be unique within the quota group. This name is used to refer to
   * the limit when overriding the limit on a per-project basis.  If a name is not provided, it will
   * be generated from the limit_by and duration fields.
   *
   * The maximum length of the limit name is 64 characters.
   *
   * The name of a limit is used as a unique identifier for this limit. Therefore, once a limit has
   * been put into use, its name should be immutable. You can use the display_name field to provide
   * a user-friendly name for the limit. The display name can be evolved over time without affecting
   * the identity of the limit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Default number of tokens that can be consumed during the specified duration. This is the number
   * of tokens assigned when a client application developer activates the service for his/her
   * project.
   *
   * Specifying a value of 0 will block all requests. This can be used if you are provisioning quota
   * to selected consumers and blocking others. Similarly, a value of -1 will indicate an unlimited
   * quota. No other negative values are allowed.
   * @return value or {@code null} for none
   */
  public java.lang.Long getDefaultLimit() {
    return defaultLimit;
  }

  /**
   * Default number of tokens that can be consumed during the specified duration. This is the number
   * of tokens assigned when a client application developer activates the service for his/her
   * project.
   *
   * Specifying a value of 0 will block all requests. This can be used if you are provisioning quota
   * to selected consumers and blocking others. Similarly, a value of -1 will indicate an unlimited
   * quota. No other negative values are allowed.
   * @param defaultLimit defaultLimit or {@code null} for none
   */
  public QuotaLimit setDefaultLimit(java.lang.Long defaultLimit) {
    this.defaultLimit = defaultLimit;
    return this;
  }

  /**
   * User-visible description for this quota limit.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * User-visible description for this quota limit.
   * @param description description or {@code null} for none
   */
  public QuotaLimit setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * The UI display name of the limit. If empty, client should use 'name' field instead.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * The UI display name of the limit. If empty, client should use 'name' field instead.
   * @param displayName displayName or {@code null} for none
   */
  public QuotaLimit setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Duration of this limit in textual notation. Example: "100s", "24h", "1d". For duration longer
   * than a day, only multiple of days is supported. We support only "100s" and "1d" for now.
   * Additional support will be added in the future. "0" indicates indefinite duration.
   * @return value or {@code null} for none
   */
  public java.lang.String getDuration() {
    return duration;
  }

  /**
   * Duration of this limit in textual notation. Example: "100s", "24h", "1d". For duration longer
   * than a day, only multiple of days is supported. We support only "100s" and "1d" for now.
   * Additional support will be added in the future. "0" indicates indefinite duration.
   * @param duration duration or {@code null} for none
   */
  public QuotaLimit setDuration(java.lang.String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Free tier value displayed in the Developers Console for this limit. The free tier is the number
   * of tokens that will be subtracted from the billed amount when billing is enabled. This field
   * can only be set on a limit with duration "1d", in a billable group; it is invalid on any other
   * limit. If this field is not set, it defaults to 0, indicating that there is no free tier for
   * this service.
   * @return value or {@code null} for none
   */
  public java.lang.Long getFreeTier() {
    return freeTier;
  }

  /**
   * Free tier value displayed in the Developers Console for this limit. The free tier is the number
   * of tokens that will be subtracted from the billed amount when billing is enabled. This field
   * can only be set on a limit with duration "1d", in a billable group; it is invalid on any other
   * limit. If this field is not set, it defaults to 0, indicating that there is no free tier for
   * this service.
   * @param freeTier freeTier or {@code null} for none
   */
  public QuotaLimit setFreeTier(java.lang.Long freeTier) {
    this.freeTier = freeTier;
    return this;
  }

  /**
   * Limit type to use for enforcing this quota limit. Each unique value gets the defined number of
   * tokens to consume from. For a quota limit that uses user type, each user making requests
   * through the same client application project will get his/her own pool of tokens to consume,
   * whereas for a limit that uses client project type, all users making requests through the same
   * client application project share a single pool of tokens.
   * @return value or {@code null} for none
   */
  public java.lang.String getLimitBy() {
    return limitBy;
  }

  /**
   * Limit type to use for enforcing this quota limit. Each unique value gets the defined number of
   * tokens to consume from. For a quota limit that uses user type, each user making requests
   * through the same client application project will get his/her own pool of tokens to consume,
   * whereas for a limit that uses client project type, all users making requests through the same
   * client application project share a single pool of tokens.
   * @param limitBy limitBy or {@code null} for none
   */
  public QuotaLimit setLimitBy(java.lang.String limitBy) {
    this.limitBy = limitBy;
    return this;
  }

  /**
   * Maximum number of tokens that can be consumed during the specified duration. Client application
   * developers can override the default limit up to this maximum. If specified, this value cannot
   * be set to a value less than the default limit. If not specified, it is set to the default
   * limit.
   *
   * To allow clients to apply overrides with no upper bound, set this to -1, indicating unlimited
   * maximum quota.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMaxLimit() {
    return maxLimit;
  }

  /**
   * Maximum number of tokens that can be consumed during the specified duration. Client application
   * developers can override the default limit up to this maximum. If specified, this value cannot
   * be set to a value less than the default limit. If not specified, it is set to the default
   * limit.
   *
   * To allow clients to apply overrides with no upper bound, set this to -1, indicating unlimited
   * maximum quota.
   * @param maxLimit maxLimit or {@code null} for none
   */
  public QuotaLimit setMaxLimit(java.lang.Long maxLimit) {
    this.maxLimit = maxLimit;
    return this;
  }

  /**
   * Name of the quota limit.  Must be unique within the quota group. This name is used to refer to
   * the limit when overriding the limit on a per-project basis.  If a name is not provided, it will
   * be generated from the limit_by and duration fields.
   *
   * The maximum length of the limit name is 64 characters.
   *
   * The name of a limit is used as a unique identifier for this limit. Therefore, once a limit has
   * been put into use, its name should be immutable. You can use the display_name field to provide
   * a user-friendly name for the limit. The display name can be evolved over time without affecting
   * the identity of the limit.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Name of the quota limit.  Must be unique within the quota group. This name is used to refer to
   * the limit when overriding the limit on a per-project basis.  If a name is not provided, it will
   * be generated from the limit_by and duration fields.
   *
   * The maximum length of the limit name is 64 characters.
   *
   * The name of a limit is used as a unique identifier for this limit. Therefore, once a limit has
   * been put into use, its name should be immutable. You can use the display_name field to provide
   * a user-friendly name for the limit. The display name can be evolved over time without affecting
   * the identity of the limit.
   * @param name name or {@code null} for none
   */
  public QuotaLimit setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  @Override
  public QuotaLimit set(String fieldName, Object value) {
    return (QuotaLimit) super.set(fieldName, value);
  }

  @Override
  public QuotaLimit clone() {
    return (QuotaLimit) super.clone();
  }

}
